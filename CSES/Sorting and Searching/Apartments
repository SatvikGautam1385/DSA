//Two Pointer Method Used
//long long int can be written as long long 
//a new way of intializing and accessing vector elements

//my in efficient code
int main()
{
        int n;
        int m;
        long long int k;
        long long int x;

        cin >> n >> m >> k;

        vector<long long int> p;

        vector<long long int> a;

        for(int i = 0; i < n; i++)
        {
                cin >> x;
                p.push_back(x);
        }

        for(int i = 0; i < m; i++)
        {
                cin >> x;
                a.push_back(x);
        }

        sort(p.begin(),p.end());

        sort(a.begin(),a.end());

        x = 0;

        for(int i = 0; i < n; i++)
        {
                for(int j = 0; j < m; j++)
                {
                        if( (p[i] <= (a[j]+k)) && (p[i] >= (a[j]-k)) )
                        {
                                x++;
                                a[j] = 2*p[n-1] + (4*k);
                                break;
                        }
                }
        }


        cout << x;

}


//Efficient Code from ChatGPT
//Comments are valid for this code

#include<bits/stdc++.h>
using namespace std;

int main() {
    int n, m;
    long long k;
    cin >> n >> m >> k;

    vector<long long> desired_sizes(n); // Desired apartment sizes
    vector<long long> apartment_sizes(m); // Available apartment sizes

    for(int i = 0; i < n; i++) {
        cin >> desired_sizes[i];
    }

    for(int i = 0; i < m; i++) {
        cin >> apartment_sizes[i];
    }

    sort(desired_sizes.begin(), desired_sizes.end());
    sort(apartment_sizes.begin(), apartment_sizes.end());

    int i = 0, j = 0;
    int matches = 0;

    while(i < n && j < m) {
        if(apartment_sizes[j] < desired_sizes[i] - k) {
            // Apartment is too small for the current applicant
            j++;
        } else if(apartment_sizes[j] > desired_sizes[i] + k) {
            // Apartment is too large for the current applicant
            i++;
        } else {
            // Apartment fits the current applicant
            matches++;
            i++;
            j++;
        }
    }

    cout << matches << endl;
    return 0;
}
